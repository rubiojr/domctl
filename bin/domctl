#!/usr/bin/ruby
require 'rubygems'
require 'ostruct'
require 'term/ansicolor'
gem 'pangea', '~> 0.1'
require 'pangea'

begin
  require "#{File.join(File.dirname(__FILE__), '../lib/domctl.rb')}"
rescue
  require 'domctl'
end
require 'yaml'

include Domctl

DOMCTL_COMMANDS = {
  :cpu_utilisation => {
    :help => "domctl cpu_utilisation",
    :proc => CpuUtilisationCommand
  },
  :farm_info => {
    :help => "domctl farm_info",
    :proc => FarmInfoCommand
  },
  :mem_info => {
    :help => "domctl mem_info [host]",
    :proc => MemInfoCommand
  },
  :locate_domu => {
    :help => "domctl locate_domu <domU name>",
    :proc => LocateDomuCommand
  },
  :list_running => {
    :help => "domctl list_running <dom0 node>",
    :proc => ListRunningCommand
  },
  :cluster_nodes => {
    :help => "domctl cluster_nodes",
    :proc => ClusterNodesCommand
  },
  :show_vifs => {
    :help => "domctl show_vifs <domU>",
    :proc => ShowVifsCommand
  },
  :domu_info => {
    :help => "domctl domu_info <domU>",
    :proc => DomuInfoCommand
  },
  :dom0_info => {
    :help => "domctl dom0_info <dom0>",
    :proc => Dom0InfoCommand
  },
  :recent_domus => {
    :help => "domctl recent_domus",
    :proc => RecentDomusCommand
  },
  :oldest_domus => {
    :help => "domctl oldest_domus",
    :proc => OldestDomusCommand
  },
  :version => {
    :help => "domctl version",
    :proc => Proc.new { puts Domctl::VERSION }
  },
  :help => {
    :proc => HelpCommand
  }
}

Domctl::Config.validate
command = ARGV.shift
if command.nil? or DOMCTL_COMMANDS[command.to_sym].nil?
  HelpCommand.call 
  exit 1
end
begin
  args = ARGV
  DOMCTL_COMMANDS[command.to_sym][:args] = args
  DOMCTL_COMMANDS[command.to_sym][:proc].call
rescue Exception => e
  if not e.is_a? SystemExit
    puts e.message
    puts e.backtrace
  end
end
