#!/usr/bin/ruby
require 'rubygems'
require 'ostruct'
require 'term/ansicolor'
gem 'pangea', '~> 0.1'
require 'pangea'

debug_enabled = false

debug = ! ARGV.index('--debug').nil?
if debug
  puts 'Debugging enabled.'
  debug_enabled = true
  ARGV.delete('--debug')
end

begin
  require "#{File.join(File.dirname(__FILE__), '../lib/domctl.rb')}"
rescue
  require 'domctl'
end
require 'yaml'

include Domctl

DOMCTL_COMMANDS = {
  :cpu_utilisation => {
    :help => CpuUtilisationHelp,
    :proc => CpuUtilisationCommand
  },
  :farm_info => {
    :help => FarmInfoHelp,
    :proc => FarmInfoCommand
  },
  :mem_info => {
    :help => MemInfoHelp,
    :proc => MemInfoCommand
  },
  :locate_domu => {
    :help => LocateDomuHelp,
    :proc => LocateDomuCommand
  },
  :list_running => {
    :help => ListRunningHelp,
    :proc => ListRunningCommand
  },
  :cluster_nodes => {
    :help => ClusterNodesHelp,
    :proc => ClusterNodesCommand
  },
  :show_vifs => {
    :help => ShowVifsHelp,
    :proc => ShowVifsCommand
  },
  :domu_info => {
    :help => DomuInfoHelp,
    :proc => DomuInfoCommand
  },
  :dom0_info => {
    :help => Dom0InfoHelp,
    :proc => Dom0InfoCommand
  },
  :recent_domus => {
    :help => RecentDomusHelp,
    :proc => RecentDomusCommand
  },
  :oldest_domus => {
    :help => OldestDomusHelp,
    :proc => OldestDomusCommand
  },
  :version => {
    :help => "domctl version",
    :proc => Proc.new { puts Domctl::VERSION }
  },
  :help => {
    :proc => HelpCommand
  }
}

trap("INT") { $stderr.puts "\nAborting."; exit }

Domctl::Config.validate
command = ARGV.shift
if command.nil? or DOMCTL_COMMANDS[command.to_sym].nil?
 DOMCTL_COMMANDS[:help][:args] = []
 HelpCommand.call 
 exit 1
end
begin
  args = ARGV
  DOMCTL_COMMANDS[command.to_sym][:args] = args
  DOMCTL_COMMANDS[command.to_sym][:proc].call
rescue SystemExit => e
  $stderr.puts "Aborting."
rescue Exception => e
  if debug_enabled
    puts e.message
    puts e.backtrace
  else
    puts "CRITICAL: #{e.message}"
  end
end

